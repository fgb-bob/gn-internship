08.24

6장
07. 할 일 목록 구현하기

- 프리젠테이셔널 컴포넌트 구현하기
  >> components 디렉터리 생성 -> Todos.js 파일 생성 -> 해당 파일에 TodoItem, TodoList, Todos 컴포넌트 작성.

- 컨테이너 컴포넌트 만들기
  >> containers 디렉터리 생성 -> TodosContainer.js 파일 생성. -> Todos.js 파일 import 
    -> TodosContainer 컴포넌트를 App.js 파일에서 렌더링.

08. useSelector 최적화

- 리덕스 상태 조회해서 사용 시 최적화를 위한 고려 사항
  >> 컨테이너 컴포넌트 
    >> useSelector 를 사용해서 리덕스 스토어의 상태 조회 시, 상태 변화 없으면 리렌더링 X.
    >> useSelector Hook 을 통해 렌더링 될 때마다 새로운 객체를 만드는 경우
      >> 상태 변화 확인 X => 렌더링 낭비.
    >> 최적화 방법은 두가지.
      >> 1. useSelector 여러번 사용
        >> 이전 코드
          >> const { number, diff } = useSelector(state => ({
              number: state.counter.number,
              diff: state.counter.diff
            }));
        >> 수정 코드
          >> const number = useSelector(state => state.counter.number;
             const diff = useSelector(state => state.counter.diff);
            >> 해당 값들 하나라도 바뀌었을 때에만 컴포넌트 리렌더링.
      >> 2. react-redux 의 shallowEqual 함수를 useSelector 의 두번쨰 인자로 전달.
        >> 수정 코드
          >> (...)
             const { number, diff } = useSelector(
              state => ({
                number: state.counter.number,
                diff: state.counter.diff
              }),
              shallowEqual
            );
            (...)
         >> equalityFn?: (left: any, right: any) => boolean
           >> 이전 값과 다음 값을 비교하여 true 가 나오면 리렌더링 X, false 가 나오면 리렌더링 O.
           >> shallowEqual 은 react-redux 에 내장되어 있는 함수.
           >> 객체 안의 가장 겉에 있는 값들을 모두 비교해 준다.
            >> 겉에 있는 값?
              const object = {
                a: {
                  x: 3,
                  y: 2,
                  z: 1
                 },
                 b: 1,
                 c: [{ id: 1 }]
              };
            >> object.a, object.b, object.c 가 가장 겉에 있는 값이다.
            >> object.a.x, object.c[0] 값은 비교하지 않는다.

09. connect 함수

- 소개
  - connect 함수
    >> 컨테이너 컴포넌트를 만드는 또 다른 방법.
    >> 리액트 컴포넌트를 만들 때 함수형 컴포넌트 우선.
    >> 만약 클래스형 컴포넌트로 작성시 Hooks 사용 X -> connect 함수 사용.
  
  - HOC 란?
    >> connect 는 HOC 이다.
    >> HOC 란, Higher-Order Component 를 의미.
    >> 리액트 컴포넌트를 개발하는 하나의 패턴.
    >> 컴포넌트의 로직을 재활용 할 때 유용한 패턴.
      >> 특정 함수 또는 값을 props 로 받아와서 사용하고 싶은 경우 사용.
    >> 리액트에 Hook 도입 전에는 자주 사용, 도입 이후 사용 X.
      >> 대부분의 경우 Hook 으로 대체 가능해서.
    >> 용도
      >> 컴포넌트를 특정 함수로 감싸서 특정 값 또는 함수를 props 로 받아와서 사용 할 수 있게 해주는 패턴.

- connect 사용해보기
  >> mapStateToProps : 컴포넌트에 props 로 넣어줄 리덕스 스토어 상태에 관련된 함수.
  >> mapDispatchToProps : 컴포넌트에 props 로 넣어줄 액션을 디스패치하는 함수들에 관련된 함수.
    >> mapDispatchToProps 는 redux 라이브러리에 내장된 bindActionCreators 라는 함수를 사용해서 리팩토링 가능.
    
- connect 함수 더 깔끔하게 작성하기
  >> mapStateToProps 와 mapDispatchToProps 를 따로 선언하지 않고 connect 함수를 사용할 때 인자 쪽에서 익명함수로 바로 만들어서 사용하면 코드가 깔끔해진다.
  >> export default connect(
      state => ({ todos: state.todos }),
      {
        addTodo,
        toggleTodo
      }
    )(TodosContainer);

- connect, 알아둬야 하는 것들
  - 1. mapStateToProps 의 두번째 파라미터 ownProps
    >> 생략 가능.
    >> 컨테이너 컴포넌트를 렌더링 할 때 직접 넣어주는 props 를 가르킨다.
    >> <CounterContainer myValue={1} /> 이라고 할 때 { myValue: 1 } 값이 ownProps 가 된다.
    >> const mapStateToProps = (state, ownProps) => ({
        todo: state.todos[ownProps.id]
      })
    >> 리덕스에서 어떤 상태를 조회 할 지 설정하는 과정에서 현재 받아온 props 에 따라 다른 상태를 조회 가능.
  - 2. connect 의 3번째 파라미터 mergeProps
    >> 생략 가능.
    >> 컴포넌트가 실제로 전달받게 될 props 를 정의.
    >> (stateProps, dispatchProps, ownProps) => Object
    >> 이 함수를 따로 지정하지 않으면 결과는 { ...ownProps, ...stateProps, ...dispatchProps } 이다.
  - 3. connect 의 4번째 파라미터 options
    >> connect 함수를 사용할 때 이 컨테이너 컴포넌트가 어떻게 동작할지에 대한 옵션을 4번째 파라미터를 통해 설정 할 수 있다.
    >> 생략 가능.
    >> Context 커스터마이징, 최적화를 위한 비교 작업 커스터마이징, ref 관련 작업 가능.


7장
01. 리덕스 프로젝트 준비하기

- 리덕스 프로젝트
  >> $ npx create-react-app learn-redux-middleware
  >> $ cd learn-redux-middleware
  >> $ yarn add redux react-redux
  
- 리덕스 모듈 준비
  >> 액션 타입, 액션 생성함수, 리듀서를 한 파일에 -> Ducks 패턴 사용.
- 프로젝트에 리덕스 적용
  >> 프로젝트에 리덕스를 적용할 때에는 루트리듀서를 불러와서 이를 통해 새로운 스토어를 만들고 Provider 를 사용해서 프로젝트에 적용
- 프리젠테이셔널 컴포넌트 준비
  >> propr 
- 컨테이너 만들기

02. 미들웨어 만들어보고 이해하기

- 리덕스 미들웨어의 템플릿
  >> const middleware = store => next => action => {
      // 작업..
    }
  >> 하나의 함수이다.
  >> 함수를 연달아서 두번 리턴하는 함수.
  >> function middleware(store) {
      return function (next) {
        return function (action) {
          // 작업.. 
        }
      }
    }
  >> 첫번쨰 store 는 리덕스 스토어 인스턴스.
    >> 이 안에 dispatch, getState, subscribe 내장 함수들이 들어있다.
  >> 두번째 next 는 액션을 다음 미들웨어에게 전달하는 함수.
    >> next(action) 이런 형태로 사용.
    >> 만약 다음 미들웨어가 없다면 리듀서에게 액션을 전달.
    >> 만약 next 호출 X ? -> 액션 무시 처리, 리듀서에게로 전달 X.
  >> 세번째 action 은 현재 처리하고 있는 액션 객체.
    >> 리덕스 스토어에서는 여러 개의 미들웨어 등록 가능.
    >> 새로운 액션이 디스패치 되면 첫번째로 등록한 미들웨어 호출. 
      -> 만약 미들웨어에서 next(action) 를 호출하게 되면 다음 미들웨어로 액션 넘기기.
    >> 만약 미들웨어에서 store.dispatch 를 사용하면 다른 액션 추가적으로 발생 가능.
    
- 미들웨어 직접 작성해보기
  >> 단순 전달받은 액션 출력, 다음.
  
- 미들웨어 적용하기
  >> 스토어에 미들웨어를 적용할 때에는 applyMiddleWare 함수 사용.

- 미들웨어 수정하기
  >> 객체와 상태 로깅.

03. redux-logger 사용 및 미들웨어와 DevTools 함께 사용하기

- redux-logger 사용하기
  >> $ yarn add redux-logger
  >> index.js 에 불러와 적용.
  
- Redux DevTools 사용하기
  >> $ yarn add redux-devtools-extension
  >> index.js 수정.

04. redux-thunk

- 소개
  >> 리덕스에서 비동기 작업을 처리할 때 가장 많이 사용하는 미들웨어.
  >> 액션 객체가 아닌 함수를 디스패치 할 수 있다.
  >> 사용 예시
    >> const getComments = () => (dispatch, getState) => {
        const id = getState().post.activeId;
        dispatch({ type: 'GET_COMMENTS' }); // 요청 시작 알림 액션
        
        api
          .getComments(id)  // 요청하고
          .then(comments => dispatch({ type: 'GET_COMMENTS_SUCCESS', id, comments })) // 성공시
          .catch(e => dispatch({ type: 'GET_COMMENTS_ERROR', error: e }));  // 실패시
      };
  >> thunk 함수에서 async/await 를 사용해도 상관 없다.
  >> $ yarn add redux-thunk
  >> redux-thunk 를 index.js 에서 불러와서 applyMiddlewares 를 통해 적용.
  
- 카운터 딜레이하기

05. redux-thunk 로 프로미스 다루기

- 프로미스를 다루는 리덕스 모듈 다루기
  - 1. 프로미스가 시작, 성공, 실패했을 때 다른 액션을 디스패치해야 한다.
  - 2. 각 프로미스마다 thunk 함수를 만들어주어야 한다.
  - 3. 리듀서에서 액션에 따라 로딩중, 결과, 에러 상태를 변경해주어야 한다.

- 포스트 목록 구현
  - 프리젠테이셔널 컴포넌트
  - 컨테이너 컴포넌트
  
- 포스트 조회
  - 프리젠테이셔널 컴포넌트
  - 컨테이너 컴포넌트
  
- 라우트 설정
  - 포스트 목록 컨테이너 불러와서 렌더링
  - 포스트 컨테이너 url 파라미터 조회, 렌더링

