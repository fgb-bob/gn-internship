0820

2장.
03. styled-components

- CSS in JS 
  >> JS 안에 CSS 를 작성하는 것을 의미.
  
- Tagged Template Literal
  >> 템플릿 리터럴에 객체를 넣으면?
    >> // [object Object]
  >> 함수를 넣으면?
    >> // (함수 정의)
  >> Tagged Template Literal
    >> const red = "빨간색";
      const blue = "파란색"; 
      function favoriteColors(texts, ...values) {
        console.log(texts);
        console.log(values);
      }
      favoriteColors`좋아하는 색 ${red} 과 ${blue} 입니다.`
    >> rest 문법을 사용하여 텍스트와 ${} 를 통해 넣은 자바스크립트 값을 따로 따로 볼 수 있다.
  >> styled-components 에서는 이런 문법을 사용하여 컴포넌트의 props 를 읽어올 수도 있다.

- styled-components 사용하기
  >> $ npx create-react-app styling-with-styled-components
     $ cd styling-with-styled-components
     $ yarn add styled-components
  >> const Circle = styled.div`
      ...
     `;
  >> 스타일을 입력함과 동시에 해당 스타일을 가진 컴포넌트 생성 가능.
  >> const Circle = styled.div`
     ... 
     background: ${props => props.color || 'black'};
     ...
     `;
  >> 컴포넌트에 color 라는 props 넣기.
  >> ${props => props.huge && css`width: 10rem; height: 10rem;` }
  >> 여러 줄의 CSS 코드를 조건부로 보여주기 위해서는 css 를 사용한다.

- polished 의 스타일 관련 유틸 함수 사용하기
  >> Sass => lighten(), darken() 유틸 함수 사용.
  >> CSS in JS => polished 라이브러리 사용.
  >> 패키지 설치
  >> $ yarn add polished
  >> ThemeProvider 를 사용하여 styled-components 로 만드는 모든 컴포넌트에서 조회하여 사용할 수 있는 전역 값 설정.
  >> theme 설정 > palette 를 조회하여 사용 가능.
  >> props.theme 로 조회 가능.
  
- 트랜지션 
  >> CSS Keyframe 사용.
  >> styled-components 에서 사용시 keyframes 라는 유틸 사용

3장.
투두리스트 만들기

4장.
01. API 연동의 기본

- 연동
  >> $ npx create-react-app api-integrate
  >> $ cd api-integrate
  >> yarn add axios <= API를 호출하기 위해 라이브러리 설치
  
- REST API
  >> 하고 싶은 작업에 따라 다른 메서드로 요청을 할 수 있다.
  - GET : 데이터 조회
  - POST : 데이터 등록
  - PUT : 데이터 수정
  - DELETE : 데이터 제거

  /* >> REST API 디자인 가이드
        - URI 는 정보의 자원을 표현.
        - 자원에 대한 행위는 HTTP Method(GET, POST, PUT, DELETE)로 표현.
  */

  >> axios 사용법
    >> import axios from 'axios';
        
       axios.get('/user/1');
        >> get 이 위치한 자리에는 메서드 이름을 소문자로 넣기
        >> 파라미터 : API 의 주소를 넣기.
    >> axios.post() 로 데이터 등록할 때 
      >> 두번째 파라미터에 등록하고자 하는 정보를 넣을 수 있음
      >> axios.post('/user', {
          username: 'username',
          name: 'name
        });

- useState 와 useEffect 로 데이터 로딩하기
  >> 요청 상태 관리
    - 1. 요청의 결과
    - 2. 로딩 상태
    - 3. 에러
  >> useEffect 에 첫번째 파라미터로 등록하는 함수에는 async 를 사용할 수 없다.

02. useReducer 로 요청 상태 관리하기

- useReducer로 구현했을 때 장점
  >> useState 의 setState 함수를 여러번 사용하지 않아도 된다
  >> 로직을 분리, 다른 곳에서도 쉽게 재사용 가능.

03. useAsync 커스텀 Hook 만들어서 사용하기

- useAsync 함수
  >> 첫번째 파라미터 : API 요청을 시작하는 함수
  >> 두번째 파라미터 : deps. 해당 함수 안에서 사용하는 useEffect의 deps 로 설정된다.
    >> 비동기 함수에서 파라미터가 필요하고, 그 파라미터가 바뀔 때 새로운 데이터를 불러오고 싶은 경우에 활용 가능.

- 데이터 나중에 불러오기
  >> useAsync 에 세번째 파라미터.
    >> 값에 따라 작업을 할지 안 할지.
  
- API 에 파라미터가 필요한 경우
  >> id 값을 props 로 받아와서 api 주소 뒤에 id 값을 넣어서 api 요청하기.
    >> async function getUser(id) {
      const reqponse = await axios.get(
        `https://jsonplaceholder.typicode.com/users/${id}`
      );
      return reqponse.data;
    }
  >> const [state] = useAsync(() => getUser(id), [id]);
    >> 파라미터를 포함시켜서 함수를 호출하는 새로운 함수를 만들어서 등록.
    >> id 가 바뀔 때마다 재호출 되도록 deps 에 id 넣기.
  >> const [userId, setUserId] = useState(null);
    >> userId 상태 관리.
    >> 초기값은 null. 
  >> onClick{() => setUserId(user.id)}
    >> 리스트에 있는 항목을 클릭하면 클릭한 사용자의 id 를 userId 값으로 설정.
  
  04. react-async 로 요청 상태 관리하기

- react-async
  >> useAsync 와 비슷한 함수가 들어있는 라이브러리
  >> 함수 이름도 useAsync 이다.
  >> 사용법이 조금 다르다.

- 사용
  >> 라이브러리 설치
  >> yarn add react-async
  >> 파라미터
    >> function User({ id }) {
        const { data: user, error, isLoading } = useAsync({
            promiseFn: getUser,
            id,
            watch: id
        });
        ...
    >> (옵션 객체) 호출할 함수 promiseFn 을 넣고, 파라미터도 필드 이름과 함께(customerId) 넣어주어야 한다.
  >> async function getUser({ id }) {}
    >> useAsync 를 사용할 때에는 프로미스를 반환하는 함수의 파라미터를 객체형태로 해주어야 한다.
      >> id 값을 따로 받아와서 사용 가능.

- Users 컴포넌트 전환
  >> reload 함수를 사용하면 데이터를 다시 불러올 수 있다.
  >> 사용자의 특정 인터랙션에 따라 API 를 호출하고 싶을 땐 promiseFn => deferFn , reload => run 함수 사용.

05. Context 와 함께 사용하기

- id 를 가지고 특정 사용자의 정보를 가져오는 API 를 호출하고 싶다?
  >> dispatch({ type: 'GET_USER' });
    try {
      const response = await getUser();
      dispatch({ type: 'GET_USER_SUCCESS', data: response.data });
    } catch (e) {
      dispatch({ type: 'GET_USER_ERROR', error: e });
   
- Context 사용하기
  >> useUsersState() 와 useUsersDispatch() 를 사용해서 state 와 dispatch 를 가져온다.
  >> getUsers() 함수 안에 dispatch를 넣어서 요청 시작.
  >> useEffect 를 사용해서 id 값이 바뀔 때마다 getUser() 함수 호출.
    >> 두번째 파라미터에 현재 props 로 받아온 id 값 넣기.

- 리팩토링
  >> 반복되는 로직들 함수화하여 재활용.
  >> 각 요청에 대하여 3가지 (시작, 성공, 실패) 액션을 처리하는 함수.

5장
01. 프로젝트 준비 및 기본적인 사용법

- 
  >> $ npx create-react-app router-tutorial
  >> $ cd router-tutorial
  >> $ yarn add react-router-dom

- 프로젝트에 라우터 적용
  >> index.js 에서 BrowserRouter 컴포넌트 사용.
    >> <BrowserRouter> <App /> </BrowserRouter>
  
- 페이지 만들기
  >> Home 컴포넌트
  >> About 페이지

- Route: 특정 주소에 컴포넌트 연결하기
  >> 사용방식
  >> <Route path="주소규칙" component="보여주고싶은 컴포넌트}>
  >> Route 컴포넌트 사용.
  
  >> / => 홈 컴포넌트
  >> /about => 두 컴포넌트 모두 보여짐.
    >> /about 경로가 / 규칙과도 일치하기 떄문에 발생하는 현상.
    >> Home 을 위한 라우트에 exact 라는 props 를 true 로 설정하면 현상이 고쳐진다.

- Link: 누르면 다른 주소로 이동시키기
  >> 리액트 라우터를 사용할 경우 : <a href="...">...</a> 태그 사용 X
    >> 사용을 원할 경우, onClick에 e.preventDefault() 를 호출하고 따로 자바스크립트로 주소 변환 필요.
    >> a 태그의 기본적인 속성 때문
      >> 페이지 이동과 동시에 페이지를 새로 불러온다. > 상태 모두 초기화 > 렌더링 새로.
  >> Link 컴포넌트 사용.
    >> HTML5 Histody API 를 사용하여 브라우저의 주소만 바꾸고 페이지를 새로 부르지 않는다.


02. 파라미터와 쿼리

- 페이지 주소 정의?
  >> 유동적인 값 전달
    >> 1. 파라미터 > /profiles/velopert
      >> 특정 id 나 이름을 가지고 조회를 할 때 사용
    >> 2. 쿼리 > /about?details=true
      >> 어떤 키워드 검색, 요청, 필요한 옵션을 전달할 때 사용
  
- URL Params (Profile 페이지에서 파라미터 사용)
  >> /profile/velopert
  >> 이런 식으로 뒷부분에 username 을 넣어줌.
  >> const { username } = match.params;
    >> 파라미터를 받아올 땐 match 안에 들어있는 params 값 참조.
    >> match 객체 안에는 현재의 주소가 Route 컴포넌트에서 정한 규칙과 어떻게 일치하는지에 대한 정보가 들어있다.
  >> path 규칙
    >> /profiles/:username 이라고 넣어주면 username 에 해당하는 값을 파라미터로 넣어주어서
       Profile 컴포넌트에서 match props 를 통하여 전달받을 수 있게 된다.
 
 - Query
  >> 라우트 컴포넌트에게 props가 전달되는 location 객체에 있는 search 값에서 읽어올 수 있다.
    >> location 객체 : 현재 앱이 갖고 있는 주소에 대한 정보를 지니고 있다.
    >> {
        key: 'ac3df4',
        pathname: '/somewhere/,
        search: '?some=search-string',
        hash: '#howdy',
        state: {
          [userDefined]: true
        }
      }
    >> search 값은 문자열 형태로 되어 있어 객체 형태로 변환하는 것은 개발자의 몫.
      >> qs 라이브러리를 사용하여 쉽게 해결 가능.
      >> $ yarn add qs

03. 서브라우트

- 의미
  >> 라우트 내부에 라우트를 만드는 것.
  >> 컴포넌트를 만들어서 그 안에 Route 컴포넌트 렌더링 하면 됨.
  >> <Route ... render={() => <div>유저를 선택해주세요.</div>} />
    >> component 대신 render 가 사용됨.
    >> 컴포넌트가 아니라 JSX 자체를 렌더링 가능.
    >> JSX 를 렌더린 하는 것이기에 상위 영역에서 props 나 기타 값들을 필요하면 전달 가능.

  >> 서비스를 만들 때 특정 라우트 내에 탭 같은 것을 만들게 된다면,
      단순히 state 로 관리하는 것 보다 서브 라우트로 관리를 하는 것을 권장.
    >> setState 를 할 필요가 없어짐.
    >> 링크를 통하여 다른 곳에서 쉽게 진입 시킬 수도 있음.
    >> 검색엔진 봇이 더욱 다양한 데이터를 수집해 갈 수 있다.

