08 23

5장.
04. 리액트 라우터 부가기능

- history 객체
  >> 라우트로 사용된 컴포넌트에게 match, location 과 함께 전달되는 props 중 하나.
  >> 이 객체를 통하여 컴포넌트 내에 구현하는 메소드에서 라우터에 직접 접근 가능.

- withRouter HoC
  >> 라우트 컴포넌트가 아닌 곳에서 match/location/history 를 사용해야 할 때 사용.

- Switch
  >> 여러 Route 들을 감싸서 그 중 규칙이 일치하는 라우트 단 하나만을 렌더링 시켜준다.
  >> 아무것도 일치하지 않았을 때 보여줄 Not Found 페이지 구현 가능.

- NavLink
  >> Link 랑 비슷한데, 만약 현재 경로와 Link 에서 사용하는 경로가 일치하는 경우 특정 스타일 혹은 클래스를 적용할 수 있는 컴포넌트.
  >> 만약 스타일이 아니라 css 클래스를 적용하고 싶을 경우, activeStyle 대신 activeClassName 을 사용.

- 기타
  - Redirect : 페이지를 리디렉트 하는 컴포넌트
  - Prompt : 이전에 사용했던 history.block 의 컴포넌트 버전
  - Route Config : JSX 형태로 라우트를 선언하는 것이 아닌 Angular 나 Vue 처럼 배열/객체를 사용하여 라우트 정의하기
  - Memory Router : 실제로 주소는 존재하지는 않는 라우터. 리액트 네이티브나, 임베디드 웹앱에서 사용하면 유용하다.

05. useReactRouter Hook 사용하기

- use-react-router 라이브러리
  >> 리액트 라우터에서 공식적인 Hook 지원이 되고 있지 않아서 다른 라이브러리를 대신 사용.
  >> $ yarn add use-react-router
  >> 설치.
    >> const { history, location, match } = useReactRouter; <= 구조 분해 할당
    >> console.log({ history, location, match }); <= 콘솔에 출력
    >> <RouterHookSample /> <= Profiles 컴포넌트 하단에 렌더링.
  >> 이 Hook 은 정식 릴리즈는 아니다.
  >> withRouter 가 너무 불편하다고 느낄 경우에만 사용하길 권장.


6장.
00. 리덕스

- 리덕스란?
  >> 리액트 생태계에서 가장 사용률이 높은 상태관리 라이브러리.
  >> 상태 관련 로직들을 다른 파일들로 분리시켜서 더욱 효율적으로 관리 가능.
  >> 글로벌 상태 관리도 손쉽게 할 수 있다.
  >> Context API 와 useReducer Hook 을 사용해서 개발하는 흐름은 리덕스를 사용하는 것과 개발 방식이 매우 유사하다.
  
- 리덕스를 사용하는 것과 Context API 를 사용하는 것의 차이
  - 1. 미들웨어
    >> 주로 비동기 작업을 처리 할 때 많이 사용됨.
    >> 특정 조건에 따라 액션 무시 가능.
    >> 액션을 콘솔에 출력하거나, 서버쪽에 로깅 가능.
    >> 액션이 디스패치 됐을 때 이를 수정해서 리듀서에게 전달되도록 가능.
    >> 특정 액션이 발생했을 때 이에 기반하여 다른 액션 발생 하도록 가능.
    >> 특정 액션이 발생했을 때 특정 자바스크립트 함수 실행 하도록 가능.
    >> useReducer Hook 에서도 외부 라이브러리를 사용하면 미들웨어 사용 가능하지만, 자주 사용되는 방식은 아님.
  - 2. 유용한 함수와 Hooks
    >> connect 함수 사용하여 리덕스의 상태 또는 액션 생성 함수를 컴포넌트의 props 로 받아올 수 있다.
    >> useSelector, useDispatch, useStore 같은 Hooks 를 사용하면 상태 조회, 액션 디스패치 손쉽게 가능.
    >> connect 함수, useSelector 함수 내부적으로 최적화가 잘 이루어져 있어 실제 상태가 바뀔 때만 컴포넌트 리렌더링.
    >> Context API 를 사용시, 자동 최적화 X -> Context 의 상태가 바뀌면 해당 Context 의 Provider 내부 컴포넌트들이 모두 리렌더링.
  - 3. 하나의 커다란 상태
    >> 모든 글로벌 상태를 하나의 커다란 상태 객체에 넣어서 사용 필수. -> 매번 새로 Context 를 만드는 수고 감소.

- 리덕스 언제 써야 할까?
  - 1. 프로젝트의 규모가 큰가?
    >> Y : 리덕스
    >> N : Context API
  - 2. 비동기 작업을 자주 하게 되는가?
    >> Y : 리덕스
    >> N : Context API
  - 3. 리덕스를 배워보니까 사용하는게 편한가?
    >> Y : 리덕스
    >> N : Context API 또는 MobX

01. 리덕스에서 사용되는 키워드 숙지하기

- 액션 (Action)
  >> 상태에 어떤 변화가 필요하게 될 때, 액션 발생. -> 하나의 객체로 표현.
    >> {
          type: "TOGGLE_VALUE"
       }
  >> 액션 객체는 type 필드를 필수적으로 가지고 있어야 한다.
  >> 그 외의 값은 자유롭게 설정 가능.
    >> {
          type: "ADD_TODO",
          data: {
              id: 0,
              text: "리덕스 배우기"
          }
       }
    >> {
          type: "CHANGE_INPUT",
          text: "hello"
       }
- 액션 생성함수 (Action Creater)
  >> 액션을 만드는 함수.
  >> 단순히 파라미터를 받아와서 액션 객체 형태로 만들어준다.
    >> export function addTodo(data) {
        return {
            type: "ADD_TODO",
            data
        };
      }
    >> // 화살표 함수 가능
      export const changeInput = text => ({
          type: "CHANGE_INPUT",
          text
      });
    >> 액션 생성함수를 만들어서 사용하는 이유 : 컴포넌트에서 더욱 쉽게 액션 발생시키기 위함.
    >> 액션을 발생 시킬 때마다 직접 액션 객체 작성 가능.
- 리듀서 (Reducer)
  >> 변화를 일으키는 함수.
  >> function reducer(state, action) {
      // 상태 업데이트 로직
      return alteredState;
    }
  >> 두가지 파라미터.
  >> 현재의 상태와 전달받은 액션을 참고하여 새로운 상태를 만들어서 반환.
  >> useReducer 를 사용할 때 작성하는 리듀서와 똑같은 형태를 가지고 있음.
  >> useReducer 에서는 일반적으로 default: 부분에 throw new Error('Unhandled Action') 과 같이 에러 발생 처리.
  >> 리덕스의 리듀서에서는 기존 state 를 그대로 반환 처리.
  >> 여러개의 리듀서를 만들고 이를 합쳐서 루트 리듀서(Root Reducer) 만들기 가능. 
    >> 루트 리듀서 안의 작은 리듀서들은 서브 리듀서 라고 불림.
- 스토어 (Store)
  >> 한 애플리케이션 당 하나의 스토어 생성.
  >> 스토어 안에는 현재의 앱 상태, 리듀서가 들어가 있다.
  >> 추가적으로 몇 가지 내장 함수들이 있다.
  - 디스패치 (dispatch)
    >> 스토어의 내장 함수 중 하나.
    >> 액션을 발생 시키는 것.
    >> dispatch 함수에는 액션을 파라미터로 전달.
      >> dispatch(action) -> 호출 시, 스토어는 리듀서 함수 실행 -> 해당 액션 처리 로직이 있을 경우, 액션을 참고하여 새로운 상태 생성.
  - 구독 (subscribe)
    >> 스토어의 내장 함수 중 하나.
    >> 함수 형태의 값을 파라미터로 받아온다.
    >> subscribe 함수에 특정 함수 전달 -> 액션이 디스패치 되었을 때 마다 전달해준 함수 호출.
    >> 리액트에서 리덕스를 사요하게 될 때 이 함수를 직접 사용하는 일은 별로 없다.
    >> 대신 react-redux 라는 라이브러리에서 제공하는 connect 함수 또는 useSelector Hook 을 사용하여 리덕스 스토어의 상태에 구독한다.

02. 리덕스의 3가지 규칙

- 1. 하나의 애플리케이션 안에는 하나의 스토어가 있다.
  >> 하나의 애플리케이션에선 단 한개의 스토어를 만들어서 사용한다.
  >> 특정 업데이트가 너무 빈번하게 일어나거나, 애플리케이션의 특정 부분을 완전히 분리시키게 될 때 여러개의 스토어를 만들 수는 있다.
  >> 하지만 그럴 경우, 개발 도구를 활용하지 못하게 된다.
- 2. 상태는 읽기전용이다.
  >> 기존의 상태는 건들이지 않고 새로운 상태를 생성하여 업데이트 해주는 방식으로 해주면, 개발자 도구를 통해 뒤로 돌리거나 앞으로 돌리기가 가능.
  >> 불변성 유지. -> 내부적으로 데이터가 변경되는 것을 감지하기 위해 shallow equality 검사를 하기 때문이다.
- 3. 변화를 일으키는 함수, 리듀서는 순수한 함수여야 한다.
  - 리듀서 함수는 이전 상태와, 액션 객체를 파라미터로 받는다.
  - 이전의 상태는 절대로 건들이지 않고, 변화를 일으킨 새로운 상태 객체를 만들어서 반환한다.
  - 똑같은 파라미터로 호출된 리듀서 함수는 언제나 똑같은 결과값을 반환해야 한다.

03. 리덕스 사용 할 준비하기

- 리액트 컴포넌트 없이 리덕스 기능 연습
  >> $ npx create-react-app learn-redux
  >> $ cd learn-redux
  >> yarn add redux
  >> 파일 생성 -> 코드 작성 -> 파일 불러오기 -> yarn start 명령어 실행 -> 개발자 도구
  >> 리덕스 스토어 안의 상태는 액션이 디스패치 됨에 따라 업데이트 된다.

04. 리덕스 모듈 만들기

- 리덕스 모듈
  >> 액션 타입, 액션 생성함수, 리듀서 가 모두 들어있는 자바스크립트 파일을 의미한다.
  >> 이 세가지 항목들은 각각 다른 파일에 저장 할 수 있다.

- 리덕스 모듈 만들기
  >> scr 디렉터리에 modules 디렉터리 생성 -> 그 안에 counter.js 파일 생성 -> todos.js 파일 생성 -> index.js 파일 생성
    -> modules/index.js 파일 내부에서 counter.js 파일과 todos.js 파일 import
    ->  >> import { combineReducers } from 'redux';
        >> const rootReducer = combineReducers({
            counter,
            todos
          });
          export default rootReducer;
    -> 리듀서 합쳐짐. -> 리덕스 스토어 생성 (src 디렉터리의 index.js 에서 작업).
      >> import { createStore } from 'redux';
         import rootReducer from './modules';
         const store = createStore(rootReducer); // 스토어 생성
    -> 리액트 프로젝트에 리덕스 적용하기
      >> $ yarn add react-redux
    -> src 디렉터리의 index.js 에서 Provider 컴포넌트 불러와 App 컴포넌트 감싸기 -> Provider 의 props 에 store 넣기
    >> Provider 로 store 를 넣어서 App 을 감싸게 되면 렌더링 하는 어떤 컴포넌트던지 리덕스 스토어에 접근 할 수 있게 된다.

05. 카운터 구현하기

- 프리젠테이셔널 컴포넌트
  >> 리덕스 스토어에 직접적으로 접근하지 않고 필요한 값 또는 함수를 props 로만 받아와서 사용하는 컴포넌트를 의미.
  >> UI 를 선언하는 것에 집중.
  >> 필요한 값들이나 함수는 props 로 받아와서 사용하는 형태로 구현한다.
  >> src 디렉터리에 components 디렉터리 생성 -> Counter.js 파일 생성

- 컨테이너 컴포넌트 
  >> 리덕스 스토어의 상태를 조회, 액션을 디스패치 할 수 있는 컴포넌트를 의미.
  >> HTML 태그들을 사용하지 않고 다른 프리젠테이셔널 컴포넌트들을 불러와서 사용.
  >> src 디렉터리에 container 디렉터리 생성 -> CounterContainer.js 파일 생성 -> App 컴포넌트에서 CounterContainer 불러와서 렌더링.

>> 리액트 컴포넌트에서 리덕스를 사용할 때, 프리젠테이셔널 컴포넌트와 컨테이너 컴포넌트를 분리해서 작성(꼭 그러할 필요는 없지만). 

06. 리덕스 개발자 도구 적용하기

- 리덕스 개발자 도구
  >> 현재 스토어의 상태를 개발자 도구에서 조회할 수 있다.
  >> 지금까지 어떤 액션들이 디스패치 되었는지 확인 가능.
  >> 액션에 따라 상태가 어떻게 변화했는지 확인 가능.
  >> 크롬 웹 스토어에서 확장 프로그램 설치 (파이어폭스에서도 사용 가능) ->  프로젝트에 redux-devtools-extension 설치
    >> $ yarn add redux-devtools-extension
    -> index.js 파일 수정. -> 적용 완료.

