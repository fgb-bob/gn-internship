0818

19. React.memo 를 사용한 컴포넌트 리렌더링 방지

- React.memo 사용
  >> 컴포넌트에서 리렌더링이 필요한 상황에서만 리렌더링을 하도록 설정할 수 있다.

- 사용법
  >> 감싸준다.

- 함수형 업데이트
  >> setter 함수에 등록하는 콜백함수의 파라미터에서 최신 users 를 참조할 수 있기 때문에 deps 배열에 users 를 넣지 않아도 된다.
  >> 이렇게 해 주면 특정 항목을 수정하게 될 때, 해당 항목만 리렌더링 될 것이다.
  
+ 
  >> useCallback, useMemo, React.memo 는 컴포넌트의 성능을 실제로 개선할 수 있는 상황에서만 사용해야 한다.
  >> React.memo 에서 두번째 파라미터에 propsAreEqual 이라는 함수를 사용하여 특정 값들만 비교 하기 가능.
    >> export default React.memo(
        UserList,
        (prevProps, nextProps) => prevProps.user === nextProps.users
      );
  >> 잘못 사용하는 경우 의도치 않은 버그가 발생할 수 있다.

20. useReducer 를 사용하여 상태 업데이트 로직 분리하기

- useReducer 이해하기
  >> 상태를 관리하게 될 때 useState를 사용하는 것 이외의 또 다른 방법이다.
    - 컴포넌트의 상태 업데이트 로직을 컴포넌트에서 분리시킬 수 있다.
    - 상태 업데이트 로직을 컴포넌트 바깥에 작성 할 수 있다.
    - 다른 파일에 작성 후 불러와서 사용 할 수 있다.
  
  - useReducer 란 ?
    >> 현재 상태와 액션 객체를 파라미터로 받아와서 새로운 상태를 반환해주는 함수.
      >> function reducer(state, action) {
          // 새로운 상태를 만드는 로직
          // const nextState = ...
          return nextState;
        }
    >> reducer 에서 반환하는 상태는 곧 컴포넌트가 지닐 새로운 상태.
    >> action : 업데이트를 위한 정보를 가지고 있다. 주로 type 값을 지닌 객체 형태로 사용한다. 꼭 따라야할 규칙 X.
    
  - 사용법
    >> const [state, dispatch] = useReducer(reducer, initialState);
      - state : 컴포넌트에서 사용할 수 있는 상태
      - dispatch : 액션을 발생시키는 함수
        >> dispatch({ type: 'INCREMENT' }).
      - useReducer 의 첫번째 파라미터 : reducer 함수
      - 두번째 파라미터 : 초기 상태
    
  - App 컴포넌트를 useReducer 로 구현하기
    >> 상태 업데이트 로직들 useState 가 아닌 useReducer 를 사용하여 구현.
    
  - useReducer vs useState - 뭐 쓸까?
    - 컴포넌트에서 관리하는 값이 단순하고 적다면 : useState
      >> const [value, setValue] = useState(true);
    - 컴포넌트에서 관리하는 값이 여러개이고 상태의 구조가 복잡하다면 : useReducer
  
21. 커스텀 Hooks 만들기

- 반복되는 로직 쉽게 재사용하는 방법
  >> use 라는 키워드로 시작하는 파일을 만들고 그 안에 함수 작성.
  >> Hooks 를 사용하여 원하는 기능을 구현해 주고, 컴포넌트에서 사용하고 싶은 값들을 반환해 주면 된다.

22. Context API 를 사용한 전역 값 관리

- 쓰이는 경우
  >> 특정 함수를 특정 컴포넌트를 거쳐서 원하는 컴포넌트에게 전달하는 작업에서 거쳐가는 컴포넌트의 수가 많을 경우
  >> 이런 경우 리액트의 Context API와 dispatch 를 함께 사용하면 복잡한 구조 해결 가능.
  
- 사용성
  >> 프로젝트 안에서 전역적으로 사용할 수 있는 값을 관리할 수 있다.
  >> 상태 가 아닌 값.
  >> 값은 함수, 외부 라이브러리 인스턴스, DOM 등이 될 수 있다.

- 생성 방법
  >> const UserDispatch = React.createContext(null); 
  >> React.createContext() 함수를 사용한다.
  >> 파라미터에는 Context 의 기본값을 설정할 수 있다.
  >> 설정값은 Context 를 쓸 때 값을 따로 지정하지 않을 경우 사용되는 기본값이다.

  >> Context 를 만들면, 안에 Provider 라는 컴포넌트가 들어있다. 이 컴포넌트를 통하여 Context 의 값을 정할 수 있다. 
  >> value 라는 값을 설정해주면 된다.

  >> <UserDispatch.Provider value={dispatch}>...</UserDispatch.Provider>
  >> 이렇게 설정해주면 Provider 에 의해 감싸진 컴포넌트 중 어디서든지 우리가 Context 의 값을 다른 곳에서 바로 조회, 사용 가능.

  >> export const UserDispatch = React.createContext(null);
  >> 이렇게 내보내주면 사용하고 싶을 때 불러와 사용 가능
  >> import { UserDispatch } from './App';

23. Immer 를 사용한 더 쉬운 불변성 관리

- 배열이나 객체 업데이트 시
  >> 직접 수정 X
  >> 불변성을 지켜주면서 업데이트 O
    >> const object = {
        a: 1,
        b: 2
      };
      object.b = 3;  => X
    >> const nextObject = {
       ...object,
       b: 3
     };              => O

  >> 배열도 마찬가지
    >> push, splice         => X
    >> concat, filter, map  => O
  
- 간단 요약
  >> Immer 를 사용할 때, 불변성 관리를 대신 해 준다.

- Immer 사용법
  >> $ yarn add immer
    >> Immer 설치
  >> import produce from 'immer';
    >> 라이브러리를 사용할 때 불러오는 코드
  >> produce 함수 사용 시
    >> 첫번째 파라미터 : 수정하고 싶은 상태
    >> 두번째 파라미터 : 어떻게 업데이트 하고 싶을지 정의하는 함수
  
- 리듀서에서 Immer 사용하기
  >> Immer 를 사용해서 간단해지는 업데이트가 있고, 코드가 더 길어지는 업데이트가 있다.

- Immer 와 함수형 업데이트
  >> useState 를 사용할 때 함수형 업데이트를 할 수 있다.
  >> 함수형 업데이트를 하는 경우, Immer 를 사용하면 상황에 따라 더 편하게 코드를 작성 할 수 있다.
  >> produce 함수에 두 개의 파라미터를 넣은 경우
    >> 첫번째 파라미터에 넣은 상태를 불변성을 유지하면서 새로운 상태를 만들어 준다.
  >> produce 함수에 첫번째 파라미터를 생략하고 업데이트 함수를 넣어줄 경우
    >> 반환 값은 새로운 상태가 아닌 상태를 업데이트 해주는 함수가 된다.

  >> const [todo, setTodo] = useState({
      text: 'Hello',
      done: false
    });
    const onClick = useCallback(() => {
      setTodo(
        produce(draft => {
          draft.done = !draft.done;
        })
      );
    }, []);

  >> Immer 는 분명히 정말 편한 라이브러리이지만, 성능적으로는 Immer 를 사용하지 않은 코드가 조금 더 빠르다
  >> 데이터의 구조가 복잡해져서 불변성을 유지하면서 업데이트 하기에는 코드가 복잡해지는 상황이 올 때, 사용하는 게 좋다.
  >> 데이터의 구조가 복잡해지는 것을 방지하라.

24. 클래스형 컴포넌트

- 클래스형 컴포넌트를 만드는 방법
  >> import React, { Component } from 'react';
    class Hello extends Component {
      render() {
        return ();
      }
    }
    export default Hello;
  >> render() 메서드가 꼭 있어야 한다.
    >> 이 메서드에서 렌더링하고 싶은 JSX를 반환하면 된다.
  >> this.props 로 props 를 조회할 수 있다.
  >> defaultProps 설정하는 두가지 방법
    >> 1. 함수형 컴포넌트에서와 같이 '함수이름.defaultProps' 로 한다
      >> Hello.defaultProps = { ... };
    >> 2. 클래스 내부에 static 키워드와 함께 선언한다
      >> static defaultProps = { ... };
  >> 함수형 컴포넌트 => 클래스형 컴포넌트
    >> function func_name() {
        // const ...
        return (
          <>
            // 화면에 출력할 요소들
          </>
        );
      }
    >> class class_name extends Component {
        render() {
          return (
            // 화면에 출력할 요소들
          );
        }
      }

- 커스텀 메서드 만들기
  >> 함수형 컴포넌트 
    >> 컴포넌트 안에 선언해 주면 된다.
      >> const onIncrease = () => {
          dispatch({ type: 'INCREMENT' });
        };
  >> 클래스형 컴포넌트
    >> 클래스 안에 커스텀 메서드를 선언한다.
      >> class Counter extends Component {
          handleIncrease() {
            console.log('increase');
          }
          render() {
            return (
              ...
              <button onClick={this.handleIncrease}>+1</button>
              ...
            );
          }
        }
      >> 클래스 내부에 종속된 함수 : 메서드
      >> 메서드들을 이벤트로 등록하게 되는 과정에서 각 메서드와 컴포넌트 인스턴스의 관계가 끊겨버린다
      >> 해결 방법 3가지
        >> 1. 클래스의 생성자 메서드 constructor 에서 bind 작업.
        >> 2. 커스텀 메서드를 선언할 때 화살표 함수 문법을 사용해서 작성.
        >> 3. onClick 에서 새로운 함수를 만들어서 전달을 하는 것.
          >> 렌더링 할 때마다 함수가 새로 만들어져서 컴포넌트 최적화 할 때 까다롭기 떄문에 추천하지 않는다.

- 상태 선언하기
  >> 클래스형 컴포넌트에서 상태 관리 할 떄 => state 사용
  >> state 를 선언할 때에는 constructor 내부에서 this.state 를 설정.
  >> state 는 객체 형태여야 한다.
  >> this.state 로 조회 가능.

- 상태 업데이트 하기
  >> this.setState 함수 사용.
  >> this.setState({
      counter: this.state.counter + 1
    });
  >> 객체 안에 업데이트 하고 싶은 값을 넣어서 호출.
  >> 클래스형 컴포넌트의 state 에서 객체 형태의 상태를 관리해야 한다면, 불변성 관리하며 업데이트.

- setState 의 함수형 업데이트
  >> 한 함수에서 setState 를 여러번에 걸쳐서 해야 되는 경우 사용.
  >> 상태가 업데이트 되고 나서 어떤 작업을 하고 싶다면 두번쨰 파라미터에 콜백함수를 넣는다.