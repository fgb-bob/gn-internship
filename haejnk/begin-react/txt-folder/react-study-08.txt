08.26

7장.
06. API 리로딩 문제 해결하기

- 포스트 목록 재로딩 문제 해결하기
  - 1. 만약 데이터가 이미 존재한다면 요청을 하지 않도록 하는 방법
    >> useEffect(() => { if (data) return; dispatch(getPosts());}, [data, dispatch]);
    >> // 컴포넌트 마운트 후 포스트 목록 요청
    >> 포스트 목록이 이미 있는데 재로딩하는 이슈 수정 가능.
  - 2. 로딩을 새로 하긴 하는데, 로딩중... 을 띄우지 않는 것.
    >> 장점 : 사용자에게 좋은 경험을 제공하면서도 뒤로가기를 통해 다시 포스트 목록을 조회할 때 최신 데이터를 보여줄 수 있다
    >> useEffect(() => { dispatch(getPosts());}, [dispatch]);
    >> // 컴포넌트 마운트 후 포스트 목록 요청
    >> if(loading && !data) return (...);
  
- 포스트 조회시 재로딩 문제 해결하기
  - 1. 컴포넌트가 언마운트 될 때 포스트 내용을 비우도록 하는 것.
    >> posts 리덕스 모듈에 CLEAR_POST 액션 준비
    >> const CLEAR_POST = 'CLEAR_POST';
    >> useEffect 의 cleanup 함수(useEffect 에서 반환하는 함수) 에서 해당 액션을 디스패치
    >> useEffect(() => { dispatch(getPost(postId)); return () => { dispatch(clearPost()); }; }, [postId, dispatch]);
    >> 다른 포스트를 읽을 때 이전 포스트 보여지는 문제 해결. 
    >> 다른 문제 + -> 이미 읽었던 포스트 불러오려고 할 경우에도 새로 요청 문제.
    >> posts 모듈에서 관리하는 상태의 구조를 바꾸어줌.
    >> id 별로 처리하도록 하고 CLEAR_POST 액션 제거 
    
  - 2-1. 아예 요청을 안하는 방법
    >> const { data, loading, error } = useSelector(state => state.posts.post[postId]) || { loading:false, data: null, error: null };
    // 아예 데이터가 존재하지 않을 때 비구조화 할당 오류 안 나도록.
    >> useEffect(() => { if(data) return (...) ;
    // 포스트가 존재하면 아예 요청을 하지 않도록.
    
  - 2-2. 요청은 하지만 로딩중을 보여주지 않는 방법.
    >> 리듀서 수정
    >> if(loading &&& !data) return (...);
    >> // 로딩중이고 데이터 없을때만.

07. thunk 에서 라우터 연동하기

- customHistory 만들어서 적용하기
  >> thunk 에서 라우터의 history 객체를 사용하려면, BrowserHistory 인스턴스를 직접 만들어서 적용해야 한다.
  >> withExtraArgument 를 사용하면 thunk 함수에서 사전에 정해준 값들을 참조할 수 있다.
  >> const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(ReduxThunk.withExtraArgument({ history: customHistory }), logger )));
  >> export const goToHome = () => (dispatch, getState, { history }) => { history.push('/'); };
  >> <button onClick={() => dispatch(goToHome())}>
  
  >> 실제 프로젝트에서는 getState()  사용.

08. json-server

- json-server
  >> 실무와 비슷한 느낌으로 가짜 API 서버를 만들 수 있다.
  >> data.json 파일 생성
  >> 서버 열기
  >> $ npx json-server ./data.json --port 4000
  >> 또는 json-server 를 글로벌로 설치해서 사용 가능
  >> $ yarn global add json-server
  >> $ json-server ./data.json --port 4000
    >> yarn 을 통해 글로벌 설치가 잘 이루어지지 않을 경우
      >> npm install -g json-server (또는)
      >> https://yarnpkg.com/en/docs/install <- 페이지의 Path setup 참고 (또는)
      >> window의 경우, yarn 삭제 후 재설치를 하는 경우 해결 가능

- axios 를 사용하여 API 요청하기
  >> REST API Client 인 axios 설치하기
  >> $ yarn add axios
  >> 실제 API 요청을 하도록 수정.
  >> export const getPosts = async () => {
      const response = await axios.get('http://localhost:4000/posts');
      return response.data;
    };

09. CORS 와 Webpack DevServer Proxy

- 브라우저에서 기본적으로 API를 요청 할 때에는 
  브라우저의 현재 주소와 API 의 주소의 도메인이 일치해야만 
  데이터를 접근할 수 있게 되어 있다.
  >> CORS <- 다른 도메인에서 API 를 요청해서 사용할 수 있게 하기 위해 설정하는 것.

- 웹팩 개발 서버의 프록시
  >> 브라우저 API 를 요청 할 때 현재 개발 서버의 주소로 요청. 
  >> 웹팩 개발 서버에서 백엔드 서버로 요청 전달.
  >> 백엔드 서버에서 브라우저쪽으로 응답 내용 반환.

- 프로젝트 배포시
  >> 리액트로 만든 서비스와 API 가 동일한 도메인에서 제공이 되는 경우.
    >> .
  >> API 의 도메인과 서비스의 도메인이 다를 경우
    >> axios 의 글로벌 baseURL 설정.
    >> axios.defaults.baseURL = process.env.NODE_ENV === 'development' ? '/' : 'https://api.velog.io/';
    >> process.env.NODE_ENV <- 현재 환경이 프로덕션인지 개발모드인지 볼 수 있는 값.

10. redux-saga

- 소개
  >> redux-thunk 다음으로 가장 많이 사용되는 라이브러리.
  >> 액션을 모니터링 하고 있다가, 특정 액션이 발생하면 이에 따라 특정 작업을 하는 방식으로 사용.
  >> 특정 작업
    - 특정 자바스크립트를 실행.
    - 다른 액션을 디스패치
    - 현재 상태 불러오기.
  >> redux-thunk 로 못하는 다양한 작업들을 처리할 수 있다.
    - 1. 비동기 작업을 할 때 기존 요청을 취소 처리 할 수 있다.
    - 2. 특정 액션이 발생했을 때 이에 따라 다른 액션이 디스패치 되게끔 하거나, 자바스크립트 코드를 실행한다.
    - 3. 웹 소켓을 사용하는 경우 Channel 이라는 기능을 사용하여 더욱 효율적으로 코드 관리.
    - 4. API 요청이 실패했을 때 재요청하는 작업 가능.

- Generator 문법 배우기
  >> 핵심 기능
    >> 함수를 작성할 때 함수를 특정 구간에 멈춰놓을 수 있다.
    >> 원할 때 다시 돌아가게 할 수 있다.
    >> 결과값을 여러번 반환 할 수 있다.
    
- 작성 방법
  >> function* generatorFunction() {
      console.log("안녕하세요.");
      yield 1;
      console.log("제너레이터 함수.");
      yield 2;
      console.log("function*");
      yield 3;
      return 4;
    }
    >> 제너레이터 함수를 만들 때에는 function* 키워드 사용.
    >> 제너레이터 함수 호출 시, 한 객체 반환됨. 이를 제너레이터라 부름.
    >> 제너레이터 생성
      >> const generator = generatorFunction();
      >> 제너레이터 함수 안의 코드를 실행하기 위해서는 generator.next() 를 호출해야 한다.
      >> yield 를 한 값 반환 후 다시 코드의 흐름 멈춤. -> .next() 다시 호출. (<- 반복.)
      
- Generator 로 액션 모니터링 하기
  >> function* watchGenerator() { 
      console.log('모니터링 시작.'); 
      while(true) { 
        const action = yield; 
        if(action.type === 'HELLO') { 
          console.log('안녕하세요.');
        }
        if (action.type === 'BYE') {
          console.log('안녕히가세요.');
        }
      }
    }
    const watch = watchGenerator();
    watch.next();
    모니터링 시작.
    watch.next({ type: 'HELLO' });
    안녕하세요.
    watch.nect({ type: 'BYE' });
    안녕히가세요.
  
- 리덕스 사가 설치 및 비동기 카운터 만들기
  >> $ yarn add redux-saga
  >> counter.js 리덕스 모듈 >> 기존의 thunk 함수 지우고, 일반 액션 생성 함수로 대체.
  >> export const increase = () => ({ type: INCREASE }); (...)
  >> function* increaseSaga() {
      yield delay(1000);
      yield put(increase());
    }
  >> redux-saga/effects 에는 다양한 유틸함수들이 들어있다.
    >> put 함수 : 새로운 액션을 디스패치 할 수 있다.
    >> takeEvery 함수 : 특정 액션 타입에 대하여 디스패치되는 모든 액션들을 처리하는 것.
    >> takeLatest 함수 : 특정 액션 타입에 대하여 디스패치된 가장 마지막 액션만을 처리하는 함수.

- 루트 사가 
  >> 여러개의 사가 합친 것
  >> all([여러 사가가 들어갈 자리]) / 'redux-saga/effects'

- 미들웨어 적용
  >> 사가 미들웨어를 만든다 -> 스토어를 생성한다 -> 루트 사가를 실행한다 -> 렌더링한다

11. redux-saga 로 프로미스 다루기

- redux-saga
  >> redux-thunk 함수는 디스패치 될 때, 비동기 작업을 처리하고, 액션 객체를 디스패치 하거나 스토어의 현재 상태를 조회 할 수 있음
  >> redux-saga 는 비동기 작업을 처리할 때 다른 방식으로 처리.
  >> 특정 액션을 모니터링하도록 하고, 해당 액션이 주어지면 이에 따라 제너레이터 함수를 실행하여 비동기 작업을 처리 후 액션 디스패치.
  >> dispatch({ type: GET_POST, payload: 1, meta: 1 })
    >> action.payload 값 추출하여 API 를 호출할 때 인자로 넣어서 호출.
    >> meta 값의 존재 -> 이전 handleAsyncActionById 호환용.

- 프로미스를 처리하는 사가 리팩토링
  >> 사가 함수를 만들게 될 때에는 사가 함수 안에 여러 종류의 비동기 작업 가능.
  >> 까다로운 작업 -> 직접 작성
  >> 간단한 비동기 작업 -> 반복되는 로직들을 함수화 하여 재사용.

12. saga 에서 라우터 연동하기

- const sagaMiddleware = createSagaMiddleware({
    context: {
      history: customHistory
    }
  });
  >> 사가 미들웨어 생성
  >> 미들웨어를 만들면서 context 를 설정 -> 추후 사가에서 getContext 함수를 통해 조회 가능.

- GOTO_HOME 액션 디스패치 -> / 경로로 이동 기능
  >> function* goToHomeSaga() {
      const history = yield getContext('history');
      history.push('/');
    }

Immutable
  
- Immutable
  - Immutable JS 와 Immer
    - JavaScript 의 가변성과 불변성
      >> javascript 객체의 가변성을 막는 두가지 방법
        >> 1. Object.freeze 
        >> 2. Immutable.js 라이브러리 
      >> 얕은 복사, 깊은 복사
  - React state 가 불변이어야 하는 이유
    >> 결론. 컴포넌트 최적화.
  
  - React 가 화면을 업데이트 하는 과정
    >> 1. setState 를 호출
    >> 2. shouldComponentUpdate 를 실행했는데 false 를 리턴하면 여기서 멈추고, true 를 리턴하면 다음 단계로 이동
    >> 3. 가상 DOM 과 실제 DOM 을 비교해서 변경사항이 있으면 화면 다시 그리기.
  
  - Immutable.js 사용법
    >> Persistent Immutable 자료구조 제공.
    >> Map, List, set, get, update, setIn, getIn, updateIn, toJS
    >> List <- push, slice, filter, sort, concat, delete
    >> delete, 
  
  - Immer 사용법
    >> npm install immer
    >> import produce from 'immer';
      const nextState = produce(baseState, draftState => {
        draftState.push({ todo: "Tweet about if" })
        draftState[1].done = true
      })
      >> immer 에서 오직 신경써야 할 것은 produce  함수 뿐
    >> produce(currentState, producer: (draftState) => void): nextState
    
    >> 생산(produce) 함수는 두개의 인자를 받는다
      >> currentState(현재 상태) : 시작점 결정
      >> produce(생산자) 함수 : 무슨 일이 발생해야 하는지 표현.
    
  - 기존 객체의 값을 직접적으로 변경하면 안됨.
  - 불변함을 유지해야 컴포넌트 최적화가 된다.
    >> 구조가 복잡해지는 경우
    >> 작업을 쉽게 해줄 수 있는 것 ->> Immutable.js
  - 계속 .get, .getIn 하는 거 싫다면 Record

JWT
  
Refresh JWT 구현을 위한 배경지식과 설계

- Bearer Authentication ?
  >> API 에 접속하기 위해 access token 을 API 서버에 제출해서 인증할 때 사용하는 인증 방법.
  >> 업계 표준 (강제 X, 개발자 선택)
  >> 표준 명세서 (RFC 6750)
  
  - server side
    >> 처음 발급시 access token 과 refresh token 발급 -> redis 블랙리스트에 해당 토큰 존재 여부 확인 
      -> access token 은 필요할 때마다 쓸 수 있게 킵 -> client가 token 을 가지고 재발급 요청 
      -> 토큰에서 정보 획득 -> 정보를 key 로 redis 에 있는지 확인하고 유효기간도 확인.
      -> 위에서 통과 못하면 재로그인 -> token 처음부터 발급
      -> Refresh token 은 payload 에 아무 정보 저장 않고 유저가 지닌 것과 redis 에 저장 된 내용만 비교, 확인. 변조, 만료 확인.
  - client side
    >> access token - 일반 쿠키 / refresh token - 일반 쿠키보다 안전한 곳
      -> 만료 날짜 확인하여 30초 이하로 남았으면 즉시 token 2개 보내 갱신 요청.
      -> Refresh 성공하면 기존 token 무조건 날림.
  - 로그아웃 정책
    >> 클라이언트에서는 두 token 모두 삭제
      -> 서버는 두 token 모두 redis 블랙리스트에 올려 요청 거부.
  - 스택오버플로우에서 주워온 plot
    >> 프론트엔드에서 매 요청을 보낼 때 마다 만료 날짜 확인 후 만료 직전 두 token 전송.
    >> 서버는 access-token 까서 필요한 정보를 얻고 만료 날짜 무시.
    >> refresh token 과 db 의 최신 refresh token 비교, 다르면 불허.
  
  >> 정해진 정석은 없다.

Ducks redux-actions
  
Ducks 구조와 redux-actions 사용하기

- Ducks 구조
  >> 최상단에는 액션 타입 정의 -> 리듀서 정의, export default 로 내보내기. -> 액션 생성자 export 로 내보내기.
  >> 이 패턴에서 따를 규칙 : 액션 타입을 만들 때 npm-module-or-app/reducer/ACTION_TYPE 의 형식으로 만들기.
  >> 만약 NPM 모듈을 만드는게 아니라면, reducer/ACTION_TYPE 형식으로 만들어도 상관 없다.
    >> 접두사 다는 이유 : 액션 이름 중첩 방지.
  >> 리듀서 만들 때는 export default 로 내보내기.
  >> 액션 생성자는 export 로 내보내기.
  
- redux-actions 를 통한 더 쉬운 액션 관리
  >> createAction 을 통한 액션 생성 자동화
    >> export const increment = (index) => ({
        type: types.INCREMENT,
        index
      });
    >> export const increment = createAction(types.INCREMENT);
  >> switch 문 대신 handleActions 사용하기
    >> handleActions 함수
      >> 첫번째 파라미터 : 액션에 따라 실행 할 함수들을 가지고 있는 객체.
      >> 두번째 파라미터 : 상태의 기본 값(initialState) 을 넣어주면 됨.
  
- 적용
  >> 모듈 작성
  >> yarn add redux-actions
  >> src/modules/index.js
  >> redux-actions 에서 createAction, handleActions 불러오고 액션 타입 선언.
  >> 액션 타입들로 액션생성자 생성, export 로 내보내기.
  >> 액션 타입에 접두사 있어서 [CREATE]: 로 작성.
  >> 기존 작성 리듀서 참조, 구현. -> SET_COLOR 을 제외한 액션들에서 파라미터들의 이름 payload 로 통합.
  >> action.payload.index <- SET_COLOR 의 경우.
  >> 변화 반영
    >> actions, reducers 디렉토리 제거
    >> ./actions 대신 ./modules 불러오기
    >> src/index.js
      >> import reducers from './modules';
    >> src/containers/App.js
    >> src/containers/CounterListContainer.js
      >> import * as actions from '../modules';

