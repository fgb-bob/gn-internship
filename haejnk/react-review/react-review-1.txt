08 30

### 리액트 발상.

어떠한 상태가 바뀌었을 때,아예 다 날려버리고 처음부터 모든 걸 새로 만들어서 보여준다면, 이라는 발상에서 시작했다.

### 리액트에서 데이터가 변하여 웹 브라우저에 실제 DOM을 업데이트할 때 3가지 절차.

1. 데이터들이 업데이트를 하면 전체 UI 를 Virtual DOM 에 리렌더링하고.
2. 이전 Virtual DOM 내용과 현재 내용 비교해서.
3. 바뀐 부분만 실제 DOM 에 적용.

[[ React 기초 ] 함수형 컴포넌트 useState](https://developerntraveler.tistory.com/57?category=899677)

### Virtual DOM.

개발자가 직접 DOM 조작 가능.

DOM 을 조작하는 경우가 생긴다면, Batch Queue 에 모아둔다.

이를 모두 처리 후, 한꺼번에 업데이트를 DOM에 반영.

[](https://yeoulcoding.tistory.com/147)


### useState

```jsx
import React, {useState} from 'react';
```

리액트 패키지에서 useState 라는 함수를 불러와준다.

```jsx
const [number, setNumber] = userState(0);
```

useState 를 사용할 때는 상태의 기본값을 파라미터로 넣어서 호출한다. 배열이 반환된다.

첫번째 원소 : 현재 상태.

두번째 원소 : Setter 함수.

업데이트를 새로운 값으로 하느냐, 기존 값을 업데이트하느냐.

```jsx
const [number, setNumber] = useState(0);
 
const onIncrease = () => {
    setNumber(number + 1); // <-
  }
```

```jsx
const [number, setNumber] = useState(0);

const onIncrease = () => {
    setNumber(prevNumber => prevNumber + 1);
  }
```


### input 상태 관리

### InputSample.js

```jsx
import React, { useState } from 'react';

function InputSample() {
  const [text, setText] = useState('');

  const onChange = (e) => {
    setText(e.target.value);
  };

  const onReset = () => {
    setText('');
  };

  return (
    <div>
      <input onChange={onChange} value={text}  />
      <button onClick={onReset}>초기화</button>
      <div>
        <b>값: {text}</b>
      </div>
    </div>
  );
}

export default InputSample;
```

input 의 상태를 관리할 때에는 input 태그의 value 값도 설정해줘야 한다.

그래야 상태가 바뀌었을 때 input 의 내용도 업데이트 된다.


### 여러 개의 input 상태 관리하기.

### InputSample.js

```jsx
import React, { useState } from 'react';

function InputSample() {
  const onChange = (e) => {
  };

  const onReset = () => {
  };

  return (
    <div>
      <input placeholder="이름" />
      <input placeholder="닉네임" />
      <button onClick={onReset}>초기화</button>
      <div>
        <b>값: </b>
        이름 (닉네임)
      </div>
    </div>
  );
}

export default InputSample;
```

input 의 개수가 여러개일 경우, input 에 name 을 설정하고 이벤트가 발생했을 때 이 값을 참조하는 것이다.

useState 에서는 문자열이 아니라 객체 형태의 상태를 관리해 줘야 한다.

### InputSample.js

```jsx
import React, { useState } from 'react';

function InputSample() {
  const [inputs, setInputs] = useState({
    name: '',  // <- name 설정
    nickname: ''  // <- nickname 설정
  }); // <- 객체 형태의 상태 관리.

  const { name, nickname } = inputs; // 비구조화 할당을 통해 값 추출

  const onChange = (e) => {
    const { value, name } = e.target; // 우선 e.target 에서 name 과 value 를 추출
    setInputs({
      ...inputs, // 기존의 input 객체를 복사한 뒤
      [name]: value // name 키를 가진 값을 value 로 설정
    });
  };

  const onReset = () => {
    setInputs({
      name: '',
      nickname: '',
    })
  };

  return (
    <div>
      <input name="name" placeholder="이름" onChange={onChange} value={name} />
      <input name="nickname" placeholder="닉네임" onChange={onChange} value={nickname}/>
      <button onClick={onReset}>초기화</button>
      <div>
        <b>값: </b>
        {name} ({nickname})
      </div>
    </div>
  );
}

export default InputSample;
```

리액트 상태에서 객체를 수정해야 할 경우.

```jsx
inputs[name] = value; // X
```

```jsx
setInputs({
	...inputs,
	[name]: value
}); // O
```

... 문법은 spread 문법이다.

객체의 내용을 모두 "펼쳐서" 기존 객체를 복사해주는 역할을 한다.