리액트 공부 ( 8. 13 )

1. 리액트는 어쩌다가 만들어졌을까?
    * DOM을 직접 건드리면서 작업을 하던 기존 Javascript 개발에서, 웹 애플리케이션의 규모가 커지면, 코드가 난잡해지기 쉽다.
    * 그래서 Ember, backbone, angular js 등의 프레임워크가 만들어졌는데, 자바스크립트의 특정 값이 바뀌면, 특정 DOM의 속성이 바뀌도록 연결해주어서, 업데이트 하는 작업을 간소화해주는 방식으로 웹개발의 어려움을 해결해주었다.
    * 리액트의 경우 -> 어떠한 상태가 바뀌었을 때, 그 상태에 따라 DOM을 업데이트할지 규칙을 정하는 것이 아니라, 아예 다 날려버리고 처음부터 모든 걸 새로 만들어서 보여준다 라는 아이디어에서 개발 시작됨.
    * 모든걸 새로만들게 된다면, 속도가 굉장히 느릴텐데, 리액트에서는 Virtual DOM 이라는 것을 사용하여 이를 가능케 했습니다.
    * Virtual DOM
        * 브라우저에 실제로 보여지는 DOM이 아니라 그냥 메모리에 가상으로 존재하는 DOM, 그냥 Javascript의 객체임
        * 실제 브라우저에 보여지고 있는 DOM과 비교를 한 후, 차이가 있는 곳을 감지하여 이를 실제 DOM에 패치시켜줍니다.
2.  작업환경 준비
    * Node.js : webpack과 babel같은 도구들이 자바스크립트 런타임인 Node.js 를 기반으로 만들어져 있습니다. 그렇기에 해당 도구들을 사용하기 위해 Node.js를 설치 합니다.
    * Yarn : node.js를 설치하게 될 때 같이 딸려오는 패키지 매니저 도구입니다. 프로젝트에서 사용되는 라이브러리를 설치하고 해당 라이브러리들의 버전 관리를 하게 될 떄 사용
    * Web pack : 리액트 컴포넌트는 JSX라는 문법으로 작성하게 되는데, 여러가지 파일을 한개로 결합하기 위해 사용하는 도구
    * Babel : 새로운 자바스크립트 문법들을 사용하기 위해 사용하는도구
    * 새 프로젝트 만들어보기
        * Npx create-react-app begin-react
3.  나의 첫번째 리액트 컴포넌트 
    * 리액트 컴포넌트를 만들 땐 import React from ‘react’ 를 통하여 불러와 주어야 합니다.
    * 리액트 컴포넌트에서는 XML 형식의 값을 반환해줄 수 있는데, 이를 JSX라고 부릅니다.
    * 코드 최하단 export default Hello; 이 코드는 Hello라는 컴포넌트를 내보내겠다는 의미입니다. 이렇게 해주면 다른 컴포넌트에서 불러와서 사용할 수 있습니다.
    *  제작된 컴포넌트는 app.js컴포넌트에 하나로 불러오고, index.js에서 import 하여 ReactDOM.render를 한다. 
        * ReactDOM.render : 브라우저에 있는 실제 DOM 내부에 리액트 컴포넌트를 렌더링하겠다는 것을 의미.
    * Public/index.html 의 <div id=root> 사이에 렌더링 된다.
4.  JSX 의 기본 규칙 알아보기
    * JSX는 리액트에서 생김새를 정의할 때, 사용하는 문법.
    * 리액트 컴포넌트 파일에서 XML 형태로 코드를 작성하면, babel이 JSX를 Javascript로 변환을 해줍니다.
    * Babel은 자바스크립트의 문법을 확장해주는 도구. 아직 지원되지 않는 최신 문법이나, 편의상 사용하거나 실험적인 자바스크립트 문법들을 정식 자바스크립트 형태로 변환해줌으로서 구형 브라우저같은 환경에서도 제대로 실행 할 수 있게 해주는 역할.
    * JSX가 Javascript 로 제대로 변환되려면 지켜주어야하는 몇가지 규칙
        * 꼭 닫혀야 하는 태그. 
            - input과 br태그도 태그를 닫아주어야함.
            - 태그와 태그 사이에 내용이 들어가지 않을 때에는, Self Closing 태그라는 것을 사용해야 합니다.
        * 꼭 감싸져야하는 태그 
            - 두개 이상의 태그는 무조건 하나의 태그로 감싸져 있어야 합니다.
                - Ex) <div> <Hello /> <div> 안녕히계세요 </div> </div>
            - 단순히 감싸기 위해 사용할 때에는 리액트의 fragment라는 것을 사용하면 됨.
                - Ex) <> <Hello /><div>안녕히계세요</div> </>
        * JSX 안에 자바스크립트 값 사용하기
            - JSX 내부에 자바스크립트 변수를 보여줘야 할 때에는 {} 으로 감싸서 보여줍니다.
                - Ex) <> <Hello /> <div> {name} </div> </>
        * style과 className
                - 인라인 스타일은 객체 형태로 작성을 해야한다.
                - Background-color 처럼 - 로 구분되어 있는 이름들은 backgroundColor 처럼 camelCase 형태로 네이밍 해주어야 한다.
                - Ex) const style = { 
			backgroundColor : ‘black’,
			color : ‘aqua’,
			fontSize : 24,
			padding : ‘1rem’
		}
		
		return (
			<>
				<Hello />
				<div style={style}> {name} </div>
‘			</>
		);
            - CSS class를 설정 할 때에는 class= 가 아니라 className= 으로 설정을 해주어야한다.
                - Ex) <div className=“gray-box”></div>
        * 주석
            - {/* 이런 형태로 */} 작성합니다.
            - 열리는 태그 내부에서는 //이런 형태로도 주석 작성이 가능하다.

