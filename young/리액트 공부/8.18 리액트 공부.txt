리액트 공부(8.18)

15. 배열 항목 수정하기
    * users배열 안의 객체 안에 active라는 속성을 추가
    * 배열의 불변성을 유지하면서 배열을 업데이트 할 때에 map함수를 사용한다. -> id 값을 비교해서 id가 다르다면 그대로 두고, 같다면 active값을 반전시키는 방식
    * Ex ) const onToggle = id => {
            * setUsers(
                * users.map(user =>
                    * User.id === id ? {…user, active:!user.active} : user
                * )
            * );
        * };
16. useEffect를 사용하여 마운트/언마운트/업데이트 할 작업 설정하기
    * useEffect 라는 Hook을 사용하여 컴포넌트가 마운트 됐을때 ( 처음 나타났을 때 ), 언마운트 됐을 때 (사라질 때), 그리고 업데이트 될 때(특정 props가 바뀔 때) 특정 작업을 처리하는 방법
    * 마운트 : 처음 나타났을 때
    * 언마운트 : 사라질 때
    * 업데이트 : 특정 props가 바뀔 때
    * useEffect를 사용할 때에는 첫번째 파라미터에는 함수, 두번째 파라미터에는 의존값이 들어있는 배열 (deps) 을 넣습니다. 
    * 만약에 deps 배열을 비우게 된다면, 컴포넌트가 처음 나타날 때에만 useEffect 에 등록한 함수가 호출됩니다.
    * cleanup함수 : useEffect에서 함수를 반환, useEffect에 대한 뒷정리를 해준다고 이해하면 됨, deps가 비어있는 경우에는, cleanup 함수가 호출된다.
    * 마운트시에 하는 작업
        * props로 받은 값을 컴포넌트의 로컬 상태로 설정
        * 외부 API 요청(Rest API등)
        * 라이브러리 사용 (D3, Video.js등)
        * setInterval을 통한 반복작업 혹은 setTimeout을 통한 작업 예약
    * 언마운트 시에 하는 작업
        * setInterval, setTimeout을 사용하여 등록한 작업들 clear하기(clearInterval, clearTimeout)
        * 라이브러리 인스턴스 제거
    * deps에 특정 값 넣기
        * deps에 특정 값을 넣게 된다면, 컴포넌트가 처음 마운트 될 때에도 호출이 되고, 지정한 값이 바뀔 때에도 호출이 됩니다.
        * 언마운트시에도 호출이 되고, 값이 바뀌기 직전에도 호출이 됩니다.
        * useEffect 안에서 사용하는 상태나, props가 있다면, useEffect의 deps에 넣어주어야 합니다. 
        * useEffect 안에서 사용하는 상태나 props를 deps에 넣지 않게 된다면 useEffect에 등록한 함수가 실행 될 때 최신 props / 상태를 가르키지 않게 됩니다.
    * Deps 파라미터를 생략하기
        * Deps 파라미터를 생략한다면, 컴포넌트가 리렌더링 될 때마다 호출이 됩니다.
        * + 리액트 컴포넌트는 기본적으로 부모컴포넌트가 리렌더링되면 자식 컴포넌트 또한 리렌더링이 된다. 바뀐 내용이 없어도
17. useMemo를 사용하여 연산한 값 재사용하기
    * 성능최적화를 위하여 연산된 값을 useMemo라는 Hook을 사용해 재사용
    * Function countActiveUsers(users) {
        * console.log(‘활성 사용자 수를 세는중…’);}
    * Const count = countActiveUsers(users); 를 호출하게 되면,
    * Input값(속성,value)이 변경될 때에도 리렌더링이 되기때문에 자원이 낭비 된다.
    * Memo는 “memorized”를 의미하는데, 이는 이전에 계산한 값을 재사용한다는 의미이다.
    * Ex) const count = useMemo(() => countActiveUsers(users), [users]);
        * 첫번째 파라미터에는 어떻게 연산할지 정의하는 함수를 넣고, 두 번째는 deps배열
        * Deps 배열 안에 넣은 내용이 바뀌면, 우리가 등록한 함수를 연산해주고, 만약에 내용이 바뀌지 않았다면 이전에 연산한 값을 재사용
18. useCallback 을 사용하여 함수 재사용하기
    * useMemo는 특정 결과값을 재사용 할 때 사용하는 반면, useCallback은 특정 함수를 새로 만들지 않고 재사용하고 싶을 때 사용합니다. 
        * -> 함수들은 컴포넌트가 리렌더링 될 때마다 새로 만들어지는데, 한번 만든 함수를 필요할 때만 새로 만들고 재사용하는 것은 여전히 중요하기 때문에 사용한다.
        * 함수 안에서 사용하는 상태 혹은 props가 있다면 꼭, deps 배열안에 포함시켜야 한다는 것.
        * Ex) const onToggle = useCallback(id => {
                * setUser(
                    * users.map(user =>  user.id === id ? {…user, active : !user.active } : user
                * )
            * );}, [user]);
19. React.memo 를 사용한 컴포넌트 리렌더링 방지
    * props가 바뀌지 않았다면, 리렌더링을 방지하여 컴포넌트의 리렌더링 성능최적화를 해줄수 있는 함수.
    * 컴포넌트에서 리렌더링이 필요한 상황에서만 리렌더링을 하도록 설정해준다
    * Ex) export default React.memo(CreateUser);
    * Ex) export default React.memo(UserList);
    * users의 배열이 바뀔 때 마다 함수가 새로 만들어지는데, 이것을 최적화 하고 싶다면,
        * 1. deps에서 users를 지운다
        * 2. 함수들에서 현재 useState로 관리하는 users를 참조하지 않게한다. (함수형 업데이트를 이용한다)
        * 3. 함수형 업데이트를 하게 되면, setUser에 등록하는 콜백함수의 파라미터에서 최신 users를 참조할 수있기 때문에 deps에 users를 넣지 않아도 된다.
        * Ex) const onChange = useCallback ( e => {
                * Const {name, value} = e.target;
                * setInputs(inputs => ({
                    * …inputs,
                    * [name] : value
                * }));
                * },[]);
        * Ex) const onCreate = useCallback(() => {
            * Const user = {
                * Id : nextId.current,
                * Username,
                * Email
            * };
            * setUsers(users => users.concat((user));
            * }
        * 이렇게 해주면, 특정 항목을 수정하게 될 때, 해당 항목만 리렌더링 됨.
        * 추가적으로, react.memo 에서 두번째 파라미터에 propsAreEqual 이라는 함수를 사용하여 특정 값들만 비교하는 것도 가능합니다. (잘못 사용하면 오류생김 사용권장 x)
20. useReducer를 사용하여 상태 업데이트 로직 분리하기
    * 상태를 관리하게 될 때 useState를 사용하는 것 말고도 다른 방법으로 useReducer를 사용한다. 
    * 이 함수를 이용하면 컴포넌트의 상태 업데이트 로직을 컴포넌트에서 분리시킬 수 있다. 상태 업데이트 로직을 컴포넌트 바깥에서 작성 할 수도 있고, 심지어 다른 파일에 작성 후 불러와서 사용 할 수도 있다.
    * Reducer 는 현재 상태와 액션객체를 파라미터로 받아와서 새로운 상태를 반환해주는 함수입니다.
    * Ex) function reducer(state, action) {
            * Return nextState; //곧 컴포넌트가 지닐 새로운 상태
        * }
        * action은 업데이트를 위한 정보를 가지고 있습니다.
        * 주로 type 값을 지닌 객체형태로 사용한다 ( 꼭 지킬필요 x)
    * 액션의 예시
        * Ex) { type : ‘INCREMENT’ } { type:’DECREMENT’} 
        * {
            * Type : ‘CHANGE_INPUT,
            * Key : ‘email’,
            * Value : ‘tester@react.com’
        * }
        * {
            * Type:’ADD_TODO’,
            * todo: {
                * Id:1,
                * Text:’useReducer 배우기’,
                * Done:false,
            * }
        * }
    * -> action의 객체의 형태는 자유, type값을 대문자와 _로 구성
    * useReducer의 사용법
        * Ex) const [ state, dispatch] = useReducer(reducer, initialState);
            * -> state는 우리가 앞으로 컴포넌트에서 사용할 수 있는 상태를 가르킴
            * dispatch는 액션을 발생시키는 함수이다.
                * -> dispatch({type:’INCREMENT’})
            * useReducer에 넣는 첫번째 피라미터는 reducer함수이고, 두번째 파라미터는 초기상태입니다. 
            * App.js 에 useReducer에 맞게 작성한 코드 참조.
    * useReducer vs useState
        * 컴포넌트가 관리하는 값이 딱 하나고, 그 값이 단순한 숫자, 문자열 또는 boolean 값이면 useState
        * 컴포넌트에서 관리하는 값이 여러개가 되어 상태의 구조가 복잡하다면 useReducer
21.  커스텀 Hooks 만들기
    * 커스텀 Hooks 만들 때에는 보통 use라는 키워드로 시작하는 파일을 만들고 그 안에 함수를 작성한다
    * useInputs.js 파일에서 작성한 커스텀 Hooks를 확인
    * 커스텀 Hooks을 만들어서 사용하면 컴포넌트의 로직을 분리시켜서 필요할 때 쉽게 재사용 할 수도 있다
22. Context API를 사용한 전역 값 관리
    * 특정 함수를 특정 컴포넌트를 거쳐서 원하는 컴포넌트에게 전달하는 작업이 자주 발생하는데, 3~4개 이상의 컴포넌트를 거쳐서 전달해야 하는 일이 발생하게 된다면 매우 번거로움. 이를 해결하기 위해 context API와 dispatch를 함께 사용한다
    * 리액트의 Context API를 사용하면, 프로젝트 안에서 전역적으로 사용할 수 있는 값을 관리 할 수 있다. 
    * Context 를 만드는 함수 
        * Ex) const UserDispatch = React.createContext(null);
        * createContext의 파라미터에는 Context의 기본값을 설정할 수 있습니다.
        * Context 안에 Provider라는 컴포넌트를 통해 Context 의 값을 정할 수 있습니다. 
        * Ex)  <UserDispatch.Provider value={dispatch}>…</UserDispatch.Provider>
        * 이렇게 설정해주고 나면 Provider에 의하여 감싸진 컴포넌트 중 어디서든지 우리가 Context의 값을 다른 곳에서 바로 조회해서 사용 할 수 있습니다.
        * Export const UserDispatch = React.createContext(null); 로 내보내고
        * import { UserDispatch } from ‘./App’; //불러오기
        * 사용 할 때에는 
            * Const dispatch = useContext(UserDispatch);
            * onClick={() => {
                * dispatch({type:’TOGGLE_USER, id : user.id});
            * }}
23. Immer 를 사용한 더 쉬운 불변성 관리
    * 데이터의 구조가 조금 까다로워지면 불변성을 지켜가면서 새로운 데이터를 생성해내는 코드가 복잡해진다.
    * 이럴 때 immer라는 라이브러리를 사용하면 된다.
    * Ex)  
    * Const nextState = produce(state, draft => {
        * Const post = draft.posts.find(post => post.id ===1);
        * post.comments.push({
            * Id: 3,
            * Text : ‘와 정말 쉽다!’
        * });
    * });
    * -> immer를 사용하면 우리가 상태를 업데이트 할 때, 불변성을 신경쓰지 않으면서 업데이트를 해주면 Immer가 불변성 관리를 대신해준다.
    * Immer 사용법
        * 1. Yarn add immer
        * 2. Import produce from ‘immer’; //보통 produce라는 이름으로 불러온다.
        * 3. Const state = {
            * Number : 1,
            * dontChangeMe : 2
        * };
        * Const nextState = produce(state, draft => {
            * Draft.number +=1;
        * });
        * -> 첫번째 파라미터에는 수정하고 싶은 상태, 두번째 파라미터에는 어떻게 업데이트하고 싶은지 정의하는 함수.
        * -> 두번째 파라미터에 넣는 함수에서는 불변성에 대해서 신경쓰지 않고 그냥 업데이트 해주면 다 알아서 해준다.