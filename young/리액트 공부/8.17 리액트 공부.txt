리액트 공부 (8.17)

5. props를 통해 컴포넌트에게 값 전달하기
    * props 의 기본 사용법
        * 어떠한 값을 컴포넌트에게 전달해줘야 할 때, props 를 사용한다.
            * Ex) function App() {
                * Return ( 
                    * <Hello name=“react”/>
                * );
                * }
            * Export default App;
            * Hello.js
            * Ex) function Hello(props) {
                * Return <div> 안녕하세요 {props.name} </div>
                * }
        * props는 객체 형태로 전달된다.
    * 여러개의 props, 비구조화 할당
        * Ex) function App(){
            * Return (
                * <Hello name=“react” color=“red />
            * );
            * }
        * Hello.js
            * Function Hello(props) {
                * Return <div style={{color: props.color}}> 안녕하세요 {props.name} </div>
            * }
    * 함수의 파라미터에서 비구조화 할당 문법을 사용하면 조금 더 코드를 간결하게 작성할 수 있습니다.
        * hello.js 
        * Ex) function Hello({ color, name }) {
            * Return <div style={{color}}> 안녕하세요 {name}</div>
            * }
    * defaultProps로 기본값 설정
        * 컴포넌트에 props를 지정하지 않았을 때 기본적으로 사용 할 값을 설정
            * Function Hello({color, name}) {
                * Return <div style={{color}}> 안녕하세요 {name}</div>
            * }
            * Hello.defaultProps = {
                * Name : ‘이름없음’
            * }
    * props.children
        * 컴포넌트 태그 사이에 넣은 값을 조회하고 싶을 때 사용
            * Wrapper.js
                * Ex) function Wrapper(){
                    * Const style = {
                        * Border : ‘2px solid black’,
                        * Padding : ‘16px’
                    * };
                    * Return ( 
                        * <div style = {style}> </div>
                    * )
                    * }
            * App.js
                * Ex) function App() {
                    * Return (
                        * <Wrapper>
                            * <Hello name =“react” color=“red/>
                            * <Hello color=“pink”/>
                        * </Wrapper>
                    * );
                * }
            * -> 이렇게 Wrapper 태그 내부에 Hello 컴포넌트를 두개를 넣었는데, 브라우저에서 확인하면 Hello 컴포넌트들은 보여지지 않는다.
            * 내부의 내용이 보여지게 하기 위해서는 Wrapper에서 props.children을 렌더링해주어야 한다.
        * wrapper.js
            * Ex) function Wrapper({children}) {
                * Const style = {
                    * Border : ‘2px solid black’,
                    * Padding : ‘16px’,
                * };
                * Return (
                    * <div style={style}>
                        * {children}
                    * </div>
                * )
                * }
6.  조건부 렌더링
    *  특정 조건에 따라 다른 결과물을 렌더링 하는 것을 의미 합니다.
        * Ex) function App() {
            * <Wrapper>
                * <Hello name=“react” color=“red” isSpecial={true}/>
                * <Hello color=“pink”/>
            * </wrapper>
            * )
        * }
        * -> 이를 처리하는 가장 기본적인 방법은, 삼항연산자를 사용하는 것입니다. 
        * Ex) function Hello({color, name, isSpecial}){
            * Return (
                * <div style = {{color}}>
                    * {isSpecial ? <b>*</b> : null} 아니면 {isSpecial && <b>*</b>}
                    * 안녕하세요 {name}
                * </div>
            * );
        * }
            * Hello.defaultProps = {
                * Name : ‘이름없음’
            * }
    * Props 값 설정을 생략하면 ={true}
        * 컴포넌트의 props 값을 설정하게 될 때 만약 props 이름만 작성하고 값 설정을 생략한다면, 이를 true로 설정한 것으로 간주합니다.
7.  useState를 통해 컴포넌트에서 바뀌는 값 관리하기
    * 사용자 인터랙션에 따라 구현.
    * 리액트 16.8 이전 버전에서는 함수형 컴포넌트에서는 상태를 관리 할 수 없었지만 이후 Hooks라는 기능이 도입되면서 함수형 컴포넌트에서도 상태를 관리할 수 있게 됨
        * Ex) Counter.js
            * Function Counter() {
                * Return (
                    * <div> <h1> 0 </h1> <button> +1 </button> <button> -1 </button> </div>
                * );
            * }
        * Ex) app.js
            * Function App(){
                * Return (
                    * <Counter />
                * );
            * }
        * 이벤트 설정
            * Ex) Counter.js
                * Function Counter() {
                    * Const onIncrease = () => {
                        * console.log(‘+1’)
                    * }
                    * Const onDecrease = () => {
                        * console.log(‘-1’)
                    * }
                    * Return (
                        * <div>
                            * <h1>0</h1>
                            * <button onClick={onIncrease}>+1</button>
                            * <button onClick={onDecrease}>-1</button>
                        * </div>
                    * );
                * } 
                * on이벤트이름={실행하고싶은함수} 형태로 설정해주어야 합니다.
                * 함수형태를 넣어주어야함, 다음과 같이 실행하면 안됨.
                * onClick={onIncrease()}
                * 이렇게 하면 렌더링되는 시점에서 함수가 호출되버림
        * 동적인 값 끼얹기, useState
            * 컴포넌트에서 동적인 값을 상태(state)라고 부릅니다.
            * useState라는 함수가 있는데, 이것을 사용하면 컴포넌트에서 상태를 관리할 수 있습니다.
            * useState를 사용할 때에는 기본값을 파라미터로 넣어서 호출해줍니다.
            * 이 함수를 호출해주면 배열이 반환되는데, 여기서 첫번째 원소는 현재 상태, 두번째 원소는 Setter 함수 입니다.
            * Ex) const [number, setNumber] = useState(0);
            * -> 배열 비구조화 할당을 통하여 각 원소를 추출해준다.
        * 함수형 업데이트
            * 기존 값을 어떻게 업데이트 할 지에 대한 함수를 등록하는 방식으로도 값을 업데이트 할 수 있습니다.
            * Ex)
            * setNumber(number +1); 
            * setNumber(prevNumber => prevNumber +1);
8. input상태 관리하기
    * 이벤트에 등록하는 함수에서는 이벤트 객체 e 를 파라미터로 받아와서 사용할 수 있는데, 이 객체의 e.target은 이벤트가 발생한 DOM을 가르키게 됩니다. 이 DOM의 value 값, 즉 e.target.value 를 조회하면 현재 input에 입력한 값이 무엇인지 알 수 있음
        * Ex) InputSample.js
            * Function INputSample() {
                * Const [text, setText] = useState(‘’);
                * Const onChange = (e) => {
                    * setText(e.target.value);
                * };
                * Const onReset = () => {
                    * setText(‘’);
                * };
            * Return (
                * <div> <input onChange={onChange} value={text}/>
                        * <button onClick={onReset}>초기화</button>
                    * <div>
                        * <b> 값 : {text} </b>
                    * </div>
                * </div>
            * );
        * }
9.  여러개의 input 상태 관리하기
    * Input 의 개수가 여러개가 됐을 때는, input에 name을 설정하고 이벤트가 발생했을 때 이 값을 참조합니다.
    * 리액트 상태에서 객체를 수정해야 할 때에는, inputs[name] = value; 이런식으로 직접 수정하면 안된다
    * 그 대신에, 새로운 객체를 만들어서 새로운 객체에 변화를 주고, 이를 상태로 사용해주어야 한다.
    * Ex) setInputs({
            * …inputs,
            * [name] : value
        * });
    * -> 이러한 작업을, “불변성을 지킨다” 라고 부른다. 불변성을 지켜주어야만 리액트 컴포넌트에서 상태가 업데이트됐음을 감지 할 수 있고 이에 따라 필요한 리렌더링이 진행됨. 기존 상태를 직접 수정하게 되면, 값을 바꿔도 리렌더링이 되지 않는다. 
10. useRef로 특정 DOM 선택하기 
    * 특정DOM을 선택해야 하는 상황에 사용하는 함수
    * 함수형 컴포넌트에서 ref를 사용 할 때에는 useRef라는 Hook함수를 사용합니다. 
    * useRef()를 사용하여 Ref객체를 만들고, 이 객체를 선택하고 싶은 DOM에 Ref값으로 설정해주어야합니다.
    * Ex) const nameInput = useRef(); //객체생성
    * nameInput.current.focus(); //.current값은 우리가 원하는 DOM을 가르킴
                                * //focus()는 input에 포커스를 하는 DOM API를 호출함.
    * <input ref={nameInput}/> //으로 속성 넣어주기
11. 배열 렌더링하기
    * 동적인 배열을 렌더링해야 할 때에는 자바스크립트 배열의 내장함수 map()을 사용합니다.
    * map()함수는 배열안에 있는 각 원소를 변환하여 새로운 배열을 만들어 줍니다. 
    * 리액트에서 동적인 배열을 렌더링해야할 때는 이 함수를 사용하여 일반 데이터 배열을 리액트 엘리먼트로 이루어진 배열로 변환해주면 됩니다.
    * Ex) return (
            * <div> 
                * {users.map(user => (
                    * <User user={user} />
                * ))}
            * </div>
        * );
    * 리액트에서 배열을 렌더링 할 때에는 key라는 props를 설정해야 합니다.
        * Key 값은 각 원소들마다 가지고 있는 고유값으로 설정을 해야합니다.
        * Ex) return (
                * <div>
                    * {users.map(user => (
                        * <User user={user} key={user.id}/>
                    * ))}
                * </div>
            * );
        * 만약 배열 안의 원소가 가지고 있는 고유한 값이 없다면 map() 함수를 사용 할 때 설정하는 콜백함수의 두번째 파라미터 index를 key로 사용하면됨
        * Ex) <div> {user.map((user, index) => (
                    * <User user={user} key={index}/>
                * ))}
            * </div>
    * key의 존재유무에 따른 업데이트 방식
        * key로 사용할 수 있는 고유 값이 있다면,
            * Ex) array.map(item => <div key={item.id}>{item.text}</div>);
            * -> 배열이 업데이트 될 때 key가 없을 때 처럼 비효율적으로 업데이트 하는 것이 아니라, 수정되지 않는 기존의 값은 그대로 두고 원하는 곳에 내용을 삽입하거나 삭제합니다.
            * 때문에 배열을 렌더링 할 때에는 고유한 key 값이 있는 것이 중요하며, 만약에 배열 안에 중복되는 key가 있을 때에는 렌더링시에 오류메시지가 콘솔에 나타나며, 업데이트가 제대로 이루어지지 않게 됩니다.
12. useRef 로 컴포넌트 안의 변수 만들기 
    * useRef Hook은 컴포넌트 안에서 조회 및 수정 할 수 있는 변수를 관리하는 것
    * useRef로 관리하는 변수는 값이 바뀐다고 해서 컴포넌트가 리렌더링 되지 않습니다. 리액트 컴포넌트에서는 상태를 바꾸는 함수를 호출하고 나서 그 다음 렌더링 이후로 업데이트 된 상태를 조회할 수 있는 반면, useRef로 관리하고 있는 변수는 설정 후 바로 조회 할 수 있습니다.
    * setTimeout, setInterval 을 통해서 만들어진 id, 외부 라이브러리를 사용하여 생성된 인스턴스, scroll 위치 와 같은 값을 관리 할 수 있습니다.
13. 배열에 항목 추가하기
    * 불변성을 지켜주어야한다. 때문에 배열의 push, splice, sort등의 함수를 사용하면 안됩니다.
    * 불변성을 지키면서 배열에 새 항목을 추가하는 방법은 두가지가 있습니다.
    * 1. Spread 연산자를 사용한다
        * Const [users, setUsers] = useState([…]);
        * Const onCreate = () => { 
            * Const user = { 
                * Id : nextId.current,
                * Username,
                * Email
            * };
            * setUsers([…users,user]);
    * 2. Concat 함수를 사용한다
    * -> 기존의 배열을 수정하지 않고, 새로운 원소가 추가된 새로운 배열을 만들어준다.
    * Ex) const onCreate = () => {
        * Const user = {
            * Id : nextId.current,
            * Username,
            * Email
        * };
        * setUsers(users.concat(user));
14.  배열에 항목 제거하기
    * 배열에 있는 항목을 제거할 때에도 불변성을 지켜가면서 업데이트를 해야한다
    * 불변성을 지키면서 특정 원소를 배열에서 제거하기 위해서는 filter 배열 내장 함수를 사용하는 것이 편하다.
    * -> 이 함수는 배열에서 특정 조건이 만족하는 원소들만 추출하여 새로운 배열을 만들어 준다.
    * Ex) const onRemove = id => {
            * setUsers(users.filter(user => user.id !== id));
        * };
